name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  GO_VERSION: '1.25.0'
  AWS_REGION: us-east-1
  ECR_REPOSITORY: configmirror-operator

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run go fmt
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted:"
            gofmt -d .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: make test

      - name: Generate manifests
        run: make manifests

      - name: Build binary
        run: make build

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Run E2E tests
        run: |
          go mod tidy
          make test-e2e

  build-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: [test, e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check for code changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            code:
              - '**/*.go'
              - 'Dockerfile'
              - 'go.mod'
              - 'go.sum'
              - 'config/**'
              - 'api/**'
              - 'internal/**'
              - 'cmd/**'
              - 'helm/**'
      - name: Checkout code
        if: steps.changes.outputs.code == 'true'
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        if: steps.changes.outputs.code == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        if: steps.changes.outputs.code == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.changes.outputs.code == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        if: steps.changes.outputs.code == 'true'
        id: meta
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(echo ${{ github.sha }} | cut -c1-7)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: steps.changes.outputs.code == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.version }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ steps.meta.outputs.date }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}

      - name: Image digest
        if: steps.changes.outputs.code == 'true'
        run: echo "Image pushed with tags ${{ steps.meta.outputs.version }} and latest"

  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.16.0'

      - name: Lint Helm chart
        run: |
          helm lint helm/configmirror-operator

      - name: Template Helm chart
        run: |
          helm template configmirror-operator helm/configmirror-operator \
            --set image.repository=test \
            --set image.tag=test
